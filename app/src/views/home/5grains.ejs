<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>사물인터넷 물꼬 - 5grains</title>
    <link rel="stylesheet" href="/css/home/toggle4.css">
</head>
<body>
    <div class="card-container">
        <% devices.forEach(device => { %>
            <div class="card" id="card-<%= device.hashNum %>">
                <div class="card-header">
                    <div class="loca-id"><%= device.loca_id %></div>
                    <div class="location">
                        <%= device.location %>
                        <a href="https://map.naver.com/p/search/<%= encodeURIComponent(device.location) %>" 
                            target="_blank" 
                            title="네이버지도에서 보기"
                            style="margin-left: -2px; text-decoration: none;">
                            🌐
                         </a>
                    </div>
                </div>
                <div class="water-level">
                    <span id="data-<%= device.hashNum %>">
                       <%= ((device.waterLevel || 0) - (device.zeroPoint || 0)).toFixed(1) %>
                    </span> cm
                    <span id="state-<%= device.hashNum %>">-</span>
                </div>
                <div class="control-buttons">
                    <button type="button" class="valve-btn" onclick="toggleValve('<%= device.hashNum %>')" id="btn-<%= device.hashNum %>">...</button>
                    <button type="button" class="zero-btn" onclick="sendZeroPoint('<%= device.hashNum %>')" id="zero-<%= device.hashNum %>">영점</button>
                    <span class="timer-text" id="timer-<%= device.hashNum %>"></span>
                </div>
            </div>
        <% }); %>
    </div>
    <div id="device-data" data-devices='<%- JSON.stringify(devices).replace(/'/g, "&#39;") %>'></div> 

    <script>
        const devices = JSON.parse(document.getElementById("device-data").dataset.devices);
        const valveStates = {};
        const valveLockStates = {};  // 🔐 반드시 필요!
    
        console.log("✅ devices 로드됨:", devices);
    
        // SSE 연결
        const eventSource = new EventSource('/events/all');
        eventSource.onmessage = function (e) {
            try {
                const allData = JSON.parse(e.data);
                for (const hashNum in allData) {
                    updateDeviceUI(hashNum, allData[hashNum]);
                }
            } catch (err) {
                console.error("[SSE 파싱 오류]", err, e.data);
            }
        };
        eventSource.onerror = function (err) {
            console.error("SSE 연결 오류:", err);
        };
    
        // UI 업데이트 함수
        function updateValveButton(hashNum) {
            const btn = document.getElementById(`btn-${hashNum}`);
            if (!btn) return;
    
            const state = valveStates[hashNum];
            btn.textContent = state === "OPEN" ? "닫기" : "열기";
            btn.classList.toggle("open-btn", state !== "OPEN");
            btn.classList.toggle("close-btn", state === "OPEN");
    
            console.log(`🔄 [${hashNum}] updateValveButton() - 잠금 상태:`, valveLockStates[hashNum]);
            btn.disabled = !!valveLockStates[hashNum];
            console.log(`⛔ btn.disabled 최종값: ${btn.disabled}`);
        }
    
        // 버튼 클릭 처리
        function toggleValve(hashNum) {
            if (valveLockStates[hashNum]) {
                console.warn(`⏳ ${hashNum}는 잠금 중`);
                return;
            }

            const isOpen = valveStates[hashNum] !== "OPEN";
            const btn = document.getElementById(`btn-${hashNum}`);
            const timerSpan = document.getElementById(`timer-${hashNum}`);
            const zeroBtn = document.getElementById(`zero-${hashNum}`);

            if (!btn || !timerSpan || !zeroBtn) {
                console.warn(`⚠️ 버튼 요소 누락: hashNum=${hashNum}`, { btn, timerSpan, zeroBtn });
                return;
            }

            valveLockStates[hashNum] = true;
            updateValveButton(hashNum);
            zeroBtn.disabled = true;

            fetch('/update_toggle_state', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ hashNum, toggleState: isOpen })
            }).then(res => {
                if (res.ok) {
                    let countdown = 35;
                    timerSpan.innerText = `(${countdown})`;

                    const intervalId = setInterval(() => {
                        countdown--;
                        if (countdown > 0) {
                            timerSpan.innerText = `(${countdown})`;
                        } else {
                            clearInterval(intervalId);
                            timerSpan.innerText = '';
                            valveLockStates[hashNum] = false;
                            updateValveButton(hashNum);
                            zeroBtn.disabled = false; // ✅ 복원
                        }
                    }, 1000);
                } else {
                    console.error('❌ 명령 전송 실패');
                    restoreButtons(hashNum);
                }
            }).catch((err) => {
                console.error('❌ 네트워크 오류', err);
                restoreButtons(hashNum);
            });

            function restoreButtons(hashNum) {
                valveLockStates[hashNum] = false;
                updateValveButton(hashNum);
                zeroBtn.disabled = false;
                timerSpan.innerText = '';
            }
        }


        function updateDeviceUI(hashNum, data) {
            const waterLevelSpan = document.getElementById(`data-${hashNum}`);
            const stateSpan = document.getElementById(`state-${hashNum}`);
            const valveStatus = (data.actualValveState || '').toUpperCase();

            // 🧠 수위 보정
            const MAX_LEVEL = 12.7;  // 센서가 최대 인식하는 수위값(cm)
            const levelRaw = Number(data.waterLevel || 0);
            const zeroPoint = Number(data.zeroPoint || 0) / 100;

            //let level = levelRaw - zeroPoint;
            let level;
            // if (levelRaw < zeroPoint) {
            //     level = MAX_LEVEL - (zeroPoint - levelRaw);  // → 한 바퀴 돌아온 것
            // } else {
            //     level = levelRaw - zeroPoint;
            // }
            if (levelRaw < zeroPoint) {
                level = zeroPoint - levelRaw;  // → 한 바퀴 돌아온 것
            } else {
                level = MAX_LEVEL-levelRaw + zeroPoint;
            }
            if (level >= 12.5 && level <= 12.7) {
                level = 0;
            }

            if (waterLevelSpan) {
                waterLevelSpan.innerText = isNaN(level) ? "0.0" : level.toFixed(1);
            }

            if (stateSpan) {
                stateSpan.innerText = valveStatus === "OPEN" ? "열림" : "닫힘";
            }

            valveStates[hashNum] = valveStatus;
            updateValveButton(hashNum);
        }



    let selectedHashNumForZero = null;

    function sendZeroPoint(hashNum) {
        selectedHashNumForZero = hashNum;
        document.getElementById("zeroModal").style.display = "block";
    }

    function closeZeroModal() {
        document.getElementById("zeroModal").style.display = "none";
        selectedHashNumForZero = null;
    }

    function confirmZeroPoint() {
        if (!selectedHashNumForZero) return;

        fetch('/zero_point', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ hashNum: selectedHashNumForZero })
        }).then(res => {
            if (res.ok) {
                alert(`✅ [${selectedHashNumForZero}] 영점 보정 전송 완료`);
            } else {
                alert(`❌ [${selectedHashNumForZero}] 보정 실패`);
            }
            closeZeroModal();
        }).catch(err => {
            console.error(err);
            alert("❌ 네트워크 오류");
            closeZeroModal();
        });
    }

    </script>
    <div id="zeroModal" class="modal">
        <div class="modal-content">
            <p>영점을 맞추시겠습니까?</p>
            <div class="modal-buttons">
                <button class="gray-btn" onclick="confirmZeroPoint()">예</button>
                <button class="gray-btn" onclick="closeZeroModal()">취소</button>
            </div>
        </div>
    </div>
</body>
</html>
