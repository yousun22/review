<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IoT 논물꼬 (Changwon, 1272)_Linchipin</title>
    <link rel="stylesheet" href="/css/home/toggle.css">
    <link href="https://fonts.googleapis.com/css2?family=Nanum+Pen+Script&family=Pacifico&display=swap" rel="stylesheet">
    <style>
        .countdown {
            display: none;
            position: absolute;
            top: -20px; /* 토글 스위치 위에 표시 */
            left: 50%;
            transform: translateX(-50%);
            font-size: 14px;
            color: red;
        }
        .reconnect-message {
            color: red;
            font-weight: bold;
            font-size: 14px;
        }
    </style>
    <script>
        window.addEventListener('load', function () {
            const phonenum1 = 37441272; // 첫 번째 장비 전화번호
            const phonenum2 = 37441273; // 두 번째 장비 전화번호
            const phonenum3 = 37475978; // 세 번째 장비 전화번호

            setupEventSource(phonenum1, 'data');
            setupEventSource(phonenum2, 'data2');
            setupEventSource(phonenum3, 'data3');

            setupToggleSwitchListener(phonenum1, 'toggle-switch1', 'countdown1', 'toggleDisplay1', 'reconnectMessage1');
            setupToggleSwitchListener(phonenum2, 'toggle-switch2', 'countdown2', 'toggleDisplay2', 'reconnectMessage2');
            setupToggleSwitchListener(phonenum3, 'toggle-switch3', 'countdown3', 'toggleDisplay3', 'reconnectMessage3');
        });

        function setupEventSource(phonenum, dataElementId) {
            const eventSource = new EventSource(`/events?phonenum=${phonenum}`);
            eventSource.onmessage = function(e) {
                const data = JSON.parse(e.data);
                document.getElementById(dataElementId).innerText = data;
            };
            eventSource.onerror = function(e) {
                console.error('EventSource failed:', e);
                eventSource.close();
            };
            window.onbeforeunload = function() {
                eventSource.close();
            };
        }

        function setupToggleSwitchListener(phonenum, switchId, countdownId, displayId, reconnectId) {
            var toggleSwitch = document.querySelector(`[data-phonenum="${phonenum}"]`);
            var countdownTimer = document.getElementById(countdownId);
            var toggleDisplay = document.getElementById(displayId);
            var reconnectMessage = document.getElementById(reconnectId);

            toggleSwitch.addEventListener('change', function() {
                const initialState = this.checked;
                sendToggleStateToServer(phonenum, this.checked, (success) => {
                    if (success) {
                        toggleSwitch.disabled = true;
                        countdownTimer.style.display = 'inline';
                        startCountdown(35, countdownTimer, toggleSwitch);
                    } else {
                        toggleSwitch.checked = initialState; // 장치 상태가 변경되지 않으면 토글을 되돌림
                    }
                });
            });

            function startCountdown(duration, countdownTimer, toggleSwitch) {
                var timer = duration, minutes, seconds;
                var countdownInterval = setInterval(function () {
                    minutes = parseInt(timer / 60, 10);
                    seconds = parseInt(timer % 60, 10);
                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    seconds = seconds < 10 ? "0" + seconds : seconds;
                    countdownTimer.textContent = minutes + ":" + seconds;
                    if (--timer < 0) {
                        timer = duration;
                        clearInterval(countdownInterval);
                        toggleSwitch.disabled = false;
                        countdownTimer.style.display = 'none';
                    }
                }, 1000);
            }

            setInterval(() => {
                fetch(`/toggle_state?phonenum=${phonenum}`)
                    .then(response => response.json())
                    .then(data => {
                        const toggleState = data.toggleState;
                        toggleDisplay.textContent = toggleState;
                        toggleSwitch.checked = toggleState === 'ON';
                        if (data.reconnectMessage) {
                            reconnectMessage.textContent = data.reconnectMessage;
                            reconnectMessage.style.display = 'block';
                        } else {
                            reconnectMessage.textContent = '';
                            reconnectMessage.style.display = 'none';
                        }
                    })
                    .catch(error => console.error('Error fetching toggle state:', error));
            }, 5000);
        }

        function sendToggleStateToServer(phonenum, state, callback) {
            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/update_toggle_state', true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onload = function() {
                if (xhr.status === 200) {
                    console.log('Toggle state updated successfully');
                    callback(true);
                } else {
                    console.error('Error updating toggle state');
                    callback(false);
                }
            };
            xhr.onerror = function() {
                console.error('Network error');
                callback(false);
            };
            xhr.send(JSON.stringify({ toggleState: state, phonenum: phonenum }));
        }

        document.addEventListener("DOMContentLoaded", function() {
            fetchToggleState(37441272, 'toggleDisplay1', 'toggle-switch1', 'reconnectMessage1');
            fetchToggleState(37441273, 'toggleDisplay2', 'toggle-switch2', 'reconnectMessage2');
            fetchToggleState(37475978, 'toggleDisplay3', 'toggle-switch3', 'reconnectMessage3');
        });

        function fetchToggleState(phonenum, displayId, switchId, reconnectId) {
            const toggleDisplay = document.getElementById(displayId);
            const toggleSwitch = document.querySelector(`[data-phonenum="${phonenum}"]`);
            const reconnectMessage = document.getElementById(reconnectId);
            fetch(`/toggle_state?phonenum=${phonenum}`)
                .then(response => response.json())
                .then(data => {
                    const toggleState = data.toggleState;
                    toggleDisplay.textContent = toggleState;
                    toggleSwitch.checked = toggleState === 'ON';
                    if (data.reconnectMessage) {
                        reconnectMessage.textContent = data.reconnectMessage;
                        reconnectMessage.style.display = 'block';
                    } else {
                        reconnectMessage.textContent = '';
                        reconnectMessage.style.display = 'none';
                    }
                })
                .catch(error => console.error('Error fetching toggle state:', error));
        }

        let activityTimeout;
        function resetActivityTimeout() {
            clearTimeout(activityTimeout);
            activityTimeout = setTimeout(function() {
                location.reload();
            }, 2 * 60 * 1000);
        }

        document.addEventListener('mousemove', resetActivityTimeout);
        document.addEventListener('keydown', resetActivityTimeout);
        document.addEventListener('click', resetActivityTimeout);

        window.onload = resetActivityTimeout;

        document.addEventListener('DOMContentLoaded', function() {
            var cards = document.querySelectorAll('.card');

            cards.forEach(function(card) {
                card.addEventListener('touchstart', function() {
                    removeTouchClass();
                    card.classList.add('touch');
                });
                card.addEventListener('touchend', function() {
                    setTimeout(function() {
                        card.classList.remove('touch');
                    }, 200);
                });
            });

            function removeTouchClass() {
                cards.forEach(function(card) {
                    card.classList.remove('touch');
                });
            }
        });

    </script>
</head>
<body>
    <div class="card-container">
        <!-- 첫 번째 장비 카드 -->
        <div class="card">
            <div class="card-header">
                <a href="#" class="triangle-btn"></a>
                <span class="bold-text">37441272</span>  |  매우먼논  |  아람1
            </div>
            <h2 class="sensor-title">
                <div class="water-level-icon">
                    <div class="water"></div>
                </div>
                <span id="data">0.0</span>cm | 5.0cm
                <div id="data-container"></div>
            </h2>
            <div class="mode-selection">
                <span class="operation-mode">모드:</span>
                <select name="mode" id="mode">
                    <option value="manual">수동</option>
                    <option value="auto">자동</option>
                    <option value="scheduler">스케줄러</option>
                </select>
                <label class="switch">
                    <input type="checkbox" id="toggle-switch1" data-phonenum="37441272">
                    <span class="slider round">
                        <span class="on">물꼬 열림</span>
                        <span class="off">물꼬 닫힘</span>
                    </span>
                    <span id="countdown1" class="countdown">00:35</span>
                    <div id="toggleDisplay1" style="position: absolute; top: 35px; left: 92px; font-size: 8px;"></div>
                    <div id="reconnectMessage1" class="reconnect-message"></div>
                </label>
            </div>
            <div class="card-end">
                <span class="additional-info"> 6월 10일 이앙   |    아람    |    예상 출수기(8월 19일) + 3day </span>
            </div>
        </div>
        
        <!-- 두 번째 장비 카드 -->
        <div class="card">
            <div class="card-header">
                <a href="#" class="triangle-btn"></a>
                <span class="bold-text">37441273</span>  |  원산마을  |  조원늦게1
            </div>
            <h2 class="sensor-title">
                <div class="water-level-icon">
                    <div class="water"></div>
                </div>
                <span id="data2">0.0</span>cm | 5.0cm
                <div id="data-container"></div>
            </h2>
            <div class="mode-selection">
                <span class="operation-mode">모드:</span>
                <select name="mode2" id="mode2">
                    <option value="manual">수동</option>
                    <option value="auto" selected>자동</option>
                    <option value="scheduler">스케줄러</option>
                </select>
                <label class="switch">
                    <input type="checkbox" id="toggle-switch2" data-phonenum="37441273">
                    <span class="slider round">
                        <span class="on">물꼬 열림</span>
                        <span class="off">물꼬 닫힘</span>
                    </span>
                    <span id="countdown2" class="countdown">00:35</span>
                    <div id="toggleDisplay2" style="position: absolute; top: 35px; left: 92px; font-size: 8px;"></div>
                    <div id="reconnectMessage2" class="reconnect-message"></div>
                </label>
            </div>
            <div class="card-end">
                <span class="additional-info"> 6월 20일 이앙   |    조원    |    예상 출수기(8월 11일) </span>
            </div>
        </div>
        
        <!-- 세 번째 장비 카드 -->
        <div class="card">
            <div class="card-header">
                <a href="#" class="triangle-btn"></a>
                <span class="bold-text">37475978</span>  |  신규장비  |  아람2
            </div>
            <h2 class="sensor-title">
                <div class="water-level-icon">
                    <div class="water"></div>
                </div>
                <span id="data3">0.0</span>cm | 5.0cm
                <div id="data-container"></div>
            </h2>
            <div class="mode-selection">
                <span class="operation-mode">모드:</span>
                <select name="mode3" id="mode3">
                    <option value="manual">수동</option>
                    <option value="auto">자동</option>
                    <option value="scheduler">스케줄러</option>
                </select>
                <label class="switch">
                    <input type="checkbox" id="toggle-switch3" data-phonenum="37475978">
                    <span class="slider round">
                        <span class="on">물꼬 열림</span>
                        <span class="off">물꼬 닫힘</span>
                    </span>
                    <span id="countdown3" class="countdown">00:35</span>
                    <div id="toggleDisplay3" style="position: absolute; top: 35px; left: 92px; font-size: 8px;"></div>
                    <div id="reconnectMessage3" class="reconnect-message"></div>
                </label>
            </div>
            <div class="card-end">
                <span class="additional-info"> 7월 1일 이앙   |    아람    |    예상 출수기(9월 10일) </span>
            </div>
        </div>
    </div>
</body>
</html>
